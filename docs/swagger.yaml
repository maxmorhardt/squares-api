definitions:
  model.APIError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: invalid request
        type: string
      requestId:
        example: 7db692fa-c767-468f-af3d-9231b0f88c69
        type: string
      timestamp:
        example: "2025-10-05T13:45:00Z"
        type: string
    type: object
  model.CreateGridRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  model.GridSwagger:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      data:
        items:
          items:
            type: string
          type: array
        type: array
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      xlabels:
        items:
          format: int32
          type: integer
        type: array
      ylabels:
        items:
          format: int32
          type: integer
        type: array
    type: object
  model.Health:
    properties:
      status:
        example: UP
        type: string
    type: object
info:
  contact: {}
  description: API for squares.maxstash.io
  title: Squares API
  version: 1.0.0
paths:
  /grids:
    get:
      description: Returns all grids
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GridSwagger'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.APIError'
      security:
      - BearerAuth: []
      summary: Get all grids
      tags:
      - grids
    post:
      consumes:
      - application/json
      description: Creates a new 10x10 grid with X and Y labels
      parameters:
      - description: Grid to create
        in: body
        name: grid
        required: true
        schema:
          $ref: '#/definitions/model.CreateGridRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GridSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.APIError'
      security:
      - BearerAuth: []
      summary: Create a new Grid
      tags:
      - grids
  /grids/{id}:
    get:
      description: Returns a single grid by ID
      parameters:
      - description: Grid ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GridSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.APIError'
      security:
      - BearerAuth: []
      summary: Get a grid by ID
      tags:
      - grids
  /grids/user/{username}:
    get:
      description: Returns all grids created by a specific user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GridSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.APIError'
      security:
      - BearerAuth: []
      summary: Get all grids by username
      tags:
      - grids
  /health:
    get:
      description: Returns UP if service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Health'
      summary: Health check
      tags:
      - health
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
